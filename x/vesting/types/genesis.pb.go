// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blackfury/vesting/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the vesting module's genesis state.
type GenesisState struct {
	Params              Params              `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	AllocationAddresses AllocationAddresses `protobuf:"bytes,2,opt,name=allocation_addresses,json=allocationAddresses,proto3" json:"allocation_addresses"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8d1f381397fc63a, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetAllocationAddresses() AllocationAddresses {
	if m != nil {
		return m.AllocationAddresses
	}
	return AllocationAddresses{}
}

// Params defines the parameters for the module.
type Params struct {
	Allocation AllocationAmounts `protobuf:"bytes,1,opt,name=allocation,proto3" json:"allocation"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8d1f381397fc63a, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAllocation() AllocationAmounts {
	if m != nil {
		return m.Allocation
	}
	return AllocationAmounts{}
}

type AllocationAmounts struct {
	TotalAmount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_amount"`
	AirdropAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=airdrop_amount,json=airdropAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"airdrop_amount"`
	VeVestingAmount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=ve_vesting_amount,json=veVestingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ve_vesting_amount"`
	StakingRewardAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=staking_reward_amount,json=stakingRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staking_reward_amount"`
	CommunityPoolAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=community_pool_amount,json=communityPoolAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"community_pool_amount"`
	StrategicReserveAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=strategic_reserve_amount,json=strategicReserveAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"strategic_reserve_amount"`
	TeamVestingAmount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=team_vesting_amount,json=teamVestingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"team_vesting_amount"`
}

func (m *AllocationAmounts) Reset()         { *m = AllocationAmounts{} }
func (m *AllocationAmounts) String() string { return proto.CompactTextString(m) }
func (*AllocationAmounts) ProtoMessage()    {}
func (*AllocationAmounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8d1f381397fc63a, []int{2}
}
func (m *AllocationAmounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationAmounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationAmounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationAmounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationAmounts.Merge(m, src)
}
func (m *AllocationAmounts) XXX_Size() int {
	return m.Size()
}
func (m *AllocationAmounts) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationAmounts.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationAmounts proto.InternalMessageInfo

type AllocationAddresses struct {
	TeamVestingAddr               string `protobuf:"bytes,1,opt,name=team_vesting_addr,json=teamVestingAddr,proto3" json:"team_vesting_addr,omitempty"`
	StrategicReserveCustodianAddr string `protobuf:"bytes,2,opt,name=strategic_reserve_custodian_addr,json=strategicReserveCustodianAddr,proto3" json:"strategic_reserve_custodian_addr,omitempty"`
}

func (m *AllocationAddresses) Reset()         { *m = AllocationAddresses{} }
func (m *AllocationAddresses) String() string { return proto.CompactTextString(m) }
func (*AllocationAddresses) ProtoMessage()    {}
func (*AllocationAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8d1f381397fc63a, []int{3}
}
func (m *AllocationAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationAddresses.Merge(m, src)
}
func (m *AllocationAddresses) XXX_Size() int {
	return m.Size()
}
func (m *AllocationAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationAddresses proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "blackfury.vesting.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "blackfury.vesting.v1.Params")
	proto.RegisterType((*AllocationAmounts)(nil), "blackfury.vesting.v1.AllocationAmounts")
	proto.RegisterType((*AllocationAddresses)(nil), "blackfury.vesting.v1.AllocationAddresses")
}

func init() {
	proto.RegisterFile("blackfury/vesting/v1/genesis.proto", fileDescriptor_e8d1f381397fc63a)
}

var fileDescriptor_e8d1f381397fc63a = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd4, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0x06, 0x70, 0xbb, 0xa4, 0x41, 0x5c, 0x0b, 0x55, 0x9c, 0x80, 0x22, 0x04, 0x4e, 0x95, 0x81,
	0x7f, 0x12, 0xb6, 0x4a, 0xb7, 0x6c, 0x0d, 0x43, 0xc5, 0x50, 0xa9, 0x18, 0xc1, 0x50, 0x09, 0xac,
	0xb3, 0xef, 0x70, 0xad, 0xd8, 0x3e, 0xeb, 0xee, 0xb5, 0x21, 0xdf, 0x80, 0xb1, 0x23, 0x63, 0x77,
	0x24, 0x3e, 0x47, 0xc7, 0x8e, 0x88, 0xa1, 0x42, 0xc9, 0x17, 0x41, 0x3e, 0x9f, 0x9d, 0xb4, 0x89,
	0x54, 0xc9, 0x53, 0xa2, 0xe4, 0xb9, 0xdf, 0xe3, 0xf7, 0x6c, 0x1f, 0x1a, 0x7a, 0x11, 0xf6, 0x27,
	0x5f, 0x33, 0x3e, 0xb5, 0x73, 0x2a, 0x20, 0x4c, 0x02, 0x3b, 0xdf, 0xb3, 0x03, 0x9a, 0x50, 0x11,
	0x0a, 0x2b, 0xe5, 0x0c, 0x98, 0xd1, 0xab, 0x33, 0x96, 0xca, 0x58, 0xf9, 0xde, 0xe3, 0x5e, 0xc0,
	0x02, 0x26, 0x03, 0x76, 0xf1, 0xad, 0xcc, 0x0e, 0x7f, 0xeb, 0x68, 0xfb, 0xb0, 0x5c, 0xfd, 0x01,
	0x30, 0x50, 0x63, 0x84, 0xda, 0x29, 0xe6, 0x38, 0x16, 0x7d, 0x7d, 0x57, 0x7f, 0xb1, 0xf5, 0xe6,
	0x89, 0xb5, 0x4e, 0xb3, 0x8e, 0x65, 0x66, 0xdc, 0xba, 0xb8, 0x1a, 0x68, 0x8e, 0x5a, 0x61, 0x78,
	0xa8, 0x87, 0xa3, 0x88, 0xf9, 0x18, 0x42, 0x96, 0xb8, 0x98, 0x10, 0x4e, 0x85, 0xa0, 0xa2, 0xbf,
	0x21, 0xa5, 0x97, 0xeb, 0xa5, 0x83, 0x7a, 0xc5, 0x41, 0xb5, 0x40, 0xb1, 0x5d, 0xbc, 0xfa, 0xd7,
	0xf0, 0x33, 0x6a, 0x97, 0xdd, 0xc6, 0x11, 0x42, 0x8b, 0x80, 0xba, 0xda, 0xe7, 0xb7, 0x76, 0xc4,
	0x2c, 0x4b, 0xa0, 0x6a, 0x58, 0x02, 0x46, 0xad, 0x9f, 0xe7, 0x03, 0x6d, 0xf8, 0x6b, 0x13, 0x75,
	0x56, 0xd2, 0xc6, 0x7b, 0xb4, 0x0d, 0x0c, 0x70, 0xe4, 0x62, 0xf9, 0x83, 0x2c, 0xbb, 0x37, 0xb6,
	0x0a, 0xe3, 0xef, 0xd5, 0xe0, 0x59, 0x10, 0xc2, 0x69, 0xe6, 0x59, 0x3e, 0x8b, 0x6d, 0x9f, 0x89,
	0x98, 0x09, 0xf5, 0xf1, 0x5a, 0x90, 0x89, 0x0d, 0xd3, 0x94, 0x0a, 0xeb, 0x5d, 0x02, 0xce, 0x96,
	0x34, 0x4a, 0xd3, 0xf8, 0x88, 0x1e, 0xe0, 0x90, 0x13, 0xce, 0xd2, 0x0a, 0xdd, 0x68, 0x84, 0xde,
	0x57, 0x8a, 0x62, 0x4f, 0x50, 0x27, 0xa7, 0xae, 0x1a, 0xbd, 0x92, 0xef, 0x34, 0x92, 0x77, 0x72,
	0xfa, 0xa9, 0x74, 0x94, 0xed, 0xa1, 0x87, 0x02, 0xf0, 0xa4, 0x80, 0x39, 0xfd, 0x86, 0x39, 0xa9,
	0xfc, 0x56, 0x23, 0xbf, 0xab, 0x30, 0x47, 0x5a, 0x8b, 0x0e, 0x9f, 0xc5, 0x71, 0x96, 0x84, 0x30,
	0x75, 0x53, 0xc6, 0xea, 0x2d, 0xdf, 0x6c, 0xd6, 0x51, 0x63, 0xc7, 0x8c, 0x55, 0x5b, 0x7f, 0x8a,
	0xfa, 0x02, 0x38, 0x06, 0x1a, 0x84, 0xbe, 0xcb, 0xa9, 0xa0, 0x3c, 0xa7, 0x55, 0x4d, 0xbb, 0x51,
	0xcd, 0xa3, 0xda, 0x73, 0x4a, 0x4e, 0x35, 0x7d, 0x41, 0x5d, 0xa0, 0x38, 0xbe, 0x79, 0x3f, 0xee,
	0x36, 0x2a, 0xe9, 0x14, 0xd4, 0xb5, 0x3b, 0x32, 0x3c, 0xd3, 0x51, 0x77, 0xcd, 0xfb, 0x63, 0xbc,
	0x42, 0x9d, 0xeb, 0xbd, 0x84, 0xf0, 0xf2, 0xa1, 0x75, 0x76, 0x96, 0x15, 0x42, 0xb8, 0x71, 0x88,
	0x76, 0x57, 0x77, 0xc3, 0xcf, 0x04, 0x30, 0x12, 0xe2, 0xf2, 0x2d, 0x2e, 0x1f, 0x4d, 0xe7, 0xe9,
	0xcd, 0x29, 0xdf, 0x56, 0xa9, 0x02, 0x1a, 0xb5, 0x7e, 0x9c, 0x0f, 0xb4, 0xf1, 0xd1, 0xc5, 0xcc,
	0xd4, 0x2f, 0x67, 0xa6, 0xfe, 0x6f, 0x66, 0xea, 0x67, 0x73, 0x53, 0xbb, 0x9c, 0x9b, 0xda, 0x9f,
	0xb9, 0xa9, 0x9d, 0xec, 0x2f, 0xcd, 0x49, 0xa3, 0xa9, 0x08, 0xb3, 0x58, 0x80, 0xbc, 0x70, 0x7b,
	0x71, 0xa8, 0x7d, 0xaf, 0x8f, 0x35, 0x39, 0xb8, 0xd7, 0x96, 0xc7, 0xd4, 0xfe, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0x18, 0xfe, 0x5d, 0xf8, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AllocationAddresses.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Allocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AllocationAmounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationAmounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationAmounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TeamVestingAmount.Size()
		i -= size
		if _, err := m.TeamVestingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StrategicReserveAmount.Size()
		i -= size
		if _, err := m.StrategicReserveAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.CommunityPoolAmount.Size()
		i -= size
		if _, err := m.CommunityPoolAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StakingRewardAmount.Size()
		i -= size
		if _, err := m.StakingRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VeVestingAmount.Size()
		i -= size
		if _, err := m.VeVestingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AirdropAmount.Size()
		i -= size
		if _, err := m.AirdropAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalAmount.Size()
		i -= size
		if _, err := m.TotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AllocationAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategicReserveCustodianAddr) > 0 {
		i -= len(m.StrategicReserveCustodianAddr)
		copy(dAtA[i:], m.StrategicReserveCustodianAddr)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StrategicReserveCustodianAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TeamVestingAddr) > 0 {
		i -= len(m.TeamVestingAddr)
		copy(dAtA[i:], m.TeamVestingAddr)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.TeamVestingAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.AllocationAddresses.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allocation.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *AllocationAmounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.AirdropAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.VeVestingAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.StakingRewardAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CommunityPoolAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.StrategicReserveAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TeamVestingAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *AllocationAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamVestingAddr)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.StrategicReserveCustodianAddr)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllocationAddresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocationAmounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationAmounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationAmounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AirdropAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeVestingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VeVestingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPoolAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategicReserveAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StrategicReserveAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamVestingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TeamVestingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocationAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamVestingAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamVestingAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategicReserveCustodianAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategicReserveCustodianAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
