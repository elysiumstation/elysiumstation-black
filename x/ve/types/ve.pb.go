// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blackfury/ve/v1/ve.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LockedBalance represents locked amount and unlock time of a ve.
type LockedBalance struct {
	// locked amount
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// unlocking unix time
	End uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *LockedBalance) Reset()         { *m = LockedBalance{} }
func (m *LockedBalance) String() string { return proto.CompactTextString(m) }
func (*LockedBalance) ProtoMessage()    {}
func (*LockedBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ac702c4be0a44ba, []int{0}
}
func (m *LockedBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedBalance.Merge(m, src)
}
func (m *LockedBalance) XXX_Size() int {
	return m.Size()
}
func (m *LockedBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedBalance.DiscardUnknown(m)
}

var xxx_messageInfo_LockedBalance proto.InternalMessageInfo

func (m *LockedBalance) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

// Checkpoint defines a checkpoint of voting power.
type Checkpoint struct {
	// voting power at checkpoint
	Bias github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=bias,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bias"`
	// weight decay slope
	// so voting power at time t: bias - slope * (t - timestamp)
	Slope github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=slope,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"slope"`
	// unix timestamp at checkpoint
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// block height at checkpoint
	Block int64 `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ac702c4be0a44ba, []int{1}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.Size()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Checkpoint) GetBlock() int64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func init() {
	proto.RegisterType((*LockedBalance)(nil), "blackfury.ve.v1.LockedBalance")
	proto.RegisterType((*Checkpoint)(nil), "blackfury.ve.v1.Checkpoint")
}

func init() { proto.RegisterFile("blackfury/ve/v1/ve.proto", fileDescriptor_5ac702c4be0a44ba) }

var fileDescriptor_5ac702c4be0a44ba = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x4a, 0x33, 0x31,
	0x14, 0xc5, 0x27, 0x5f, 0xff, 0x40, 0x03, 0x1f, 0x4a, 0xe8, 0x62, 0x28, 0x92, 0x96, 0x2e, 0xa4,
	0x1b, 0x13, 0x8a, 0x6f, 0x30, 0x8a, 0x28, 0xb8, 0xea, 0xd2, 0x5d, 0x92, 0xc6, 0x36, 0xcc, 0x4c,
	0xee, 0xd0, 0x64, 0x06, 0xfb, 0x16, 0x3e, 0x56, 0x71, 0xd5, 0xa5, 0xb8, 0x28, 0xd2, 0xbe, 0x88,
	0x4c, 0xa6, 0x58, 0xb7, 0xba, 0xca, 0x4d, 0x4e, 0x7e, 0xf7, 0x1c, 0x38, 0x38, 0x96, 0x99, 0x50,
	0xe9, 0x73, 0xb9, 0x5a, 0xf3, 0x4a, 0xf3, 0x6a, 0xca, 0x2b, 0xcd, 0x8a, 0x15, 0x78, 0x20, 0x67,
	0xdf, 0x0a, 0xab, 0x34, 0xab, 0xa6, 0x83, 0xfe, 0x02, 0x16, 0x10, 0x34, 0x5e, 0x4f, 0xcd, 0xb7,
	0x01, 0x55, 0xe0, 0x72, 0x70, 0x5c, 0x0a, 0x57, 0xf3, 0x52, 0x7b, 0x31, 0xe5, 0x0a, 0x8c, 0x6d,
	0xf4, 0xb1, 0xc1, 0xff, 0x1f, 0x41, 0xa5, 0x7a, 0x9e, 0x88, 0x4c, 0x58, 0xa5, 0xc9, 0x1d, 0xee,
	0x8a, 0x1c, 0x4a, 0xeb, 0x63, 0x34, 0x42, 0x93, 0x5e, 0xc2, 0x36, 0xbb, 0x61, 0xf4, 0xb1, 0x1b,
	0x5e, 0x2e, 0x8c, 0x5f, 0x96, 0x92, 0x29, 0xc8, 0xf9, 0x71, 0x67, 0x73, 0x5c, 0xb9, 0x79, 0xca,
	0xfd, 0xba, 0xd0, 0x8e, 0x3d, 0x58, 0x3f, 0x3b, 0xd2, 0xe4, 0x1c, 0xb7, 0xb4, 0x9d, 0xc7, 0xff,
	0x46, 0x68, 0xd2, 0x9e, 0xd5, 0xe3, 0xf8, 0x0d, 0x61, 0x7c, 0xb3, 0xd4, 0x2a, 0x2d, 0xc0, 0x58,
	0x4f, 0x12, 0xdc, 0x96, 0x46, 0xb8, 0x3f, 0xda, 0x04, 0x96, 0xdc, 0xe2, 0x8e, 0xcb, 0xa0, 0xd0,
	0xc1, 0xe6, 0xf7, 0x4b, 0x1a, 0x98, 0x5c, 0xe0, 0x9e, 0x37, 0xb9, 0x76, 0x5e, 0xe4, 0x45, 0xdc,
	0x0a, 0x81, 0x4f, 0x0f, 0xa4, 0x8f, 0x3b, 0x32, 0x03, 0x95, 0xc6, 0xed, 0x11, 0x9a, 0xb4, 0x66,
	0xcd, 0x25, 0xb9, 0xdf, 0xec, 0x29, 0xda, 0xee, 0x29, 0xfa, 0xdc, 0x53, 0xf4, 0x7a, 0xa0, 0xd1,
	0xf6, 0x40, 0xa3, 0xf7, 0x03, 0x8d, 0x9e, 0xd8, 0x0f, 0x73, 0x9d, 0xad, 0x9d, 0x29, 0x73, 0xe7,
	0x85, 0x37, 0x60, 0xf9, 0xa9, 0xcc, 0x97, 0xba, 0xce, 0x10, 0x44, 0x76, 0x43, 0x11, 0xd7, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x68, 0x7d, 0xa2, 0xeb, 0x01, 0x00, 0x00,
}

func (m *LockedBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Slope.Size()
		i -= size
		if _, err := m.Slope.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Bias.Size()
		i -= size
		if _, err := m.Bias.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintVe(dAtA []byte, offset int, v uint64) int {
	offset -= sovVe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockedBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovVe(uint64(l))
	if m.End != 0 {
		n += 1 + sovVe(uint64(m.End))
	}
	return n
}

func (m *Checkpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bias.Size()
	n += 1 + l + sovVe(uint64(l))
	l = m.Slope.Size()
	n += 1 + l + sovVe(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovVe(uint64(m.Timestamp))
	}
	if m.Block != 0 {
		n += 1 + sovVe(uint64(m.Block))
	}
	return n
}

func sovVe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVe(x uint64) (n int) {
	return sovVe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockedBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVe = fmt.Errorf("proto: unexpected end of group")
)
